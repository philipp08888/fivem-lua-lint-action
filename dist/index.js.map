{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js","../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/env-options.js","../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/cli-options.js","../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/config.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = Boolean(options && options.debug)\n  if (debug) {\n    _debug('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","// ../config.js accepts options via environment variables\nconst options = {}\n\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n  options.encoding = process.env.DOTENV_CONFIG_ENCODING\n}\n\nif (process.env.DOTENV_CONFIG_PATH != null) {\n  options.path = process.env.DOTENV_CONFIG_PATH\n}\n\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n  options.debug = process.env.DOTENV_CONFIG_DEBUG\n}\n\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n  options.override = process.env.DOTENV_CONFIG_OVERRIDE\n}\n\nif (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {\n  options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY\n}\n\nmodule.exports = options\n","const re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/\n\nmodule.exports = function optionMatcher (args) {\n  return args.reduce(function (acc, cur) {\n    const matches = cur.match(re)\n    if (matches) {\n      acc[matches[1]] = matches[2]\n    }\n    return acc\n  }, {})\n}\n","(function () {\n  require('./lib/main').config(\n    Object.assign(\n      {},\n      require('./lib/env-options'),\n      require('./lib/cli-options')(process.argv)\n    )\n  )\n})()\n"],"names":["require$$0","path","require$$1","mainModule","require$$2"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}